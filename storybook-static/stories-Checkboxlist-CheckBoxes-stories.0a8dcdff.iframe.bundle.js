"use strict";(self.webpackChunk_pa_digital_govuk_frontend_react=self.webpackChunk_pa_digital_govuk_frontend_react||[]).push([[9914],{"./src/stories/Checkboxlist/CheckBoxes.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Compact:()=>Compact,Default:()=>Default,Divider:()=>Divider,Error:()=>Error,ExclusiveCheckBoxes:()=>ExclusiveCheckBoxes,Hint:()=>Hint,MultiQuestion:()=>MultiQuestion,PreChecked:()=>PreChecked,ToggleCheckBoxes:()=>ToggleCheckBoxes,__namedExportsOrder:()=>__namedExportsOrder,default:()=>CheckBoxes_stories});var react=__webpack_require__("./node_modules/react/index.js"),v4=__webpack_require__("./node_modules/uuid/dist/esm-browser/v4.js");function CheckBox({identifier,groupName,text,value,hint,checked=!1,onCheckChanged}){const checkBoxAttr={"aria-describedby":hint&&`${identifier}-item-hint`};return react.createElement("div",{className:"govuk-checkboxes__item"},react.createElement("input",{className:"govuk-checkboxes__input",id:identifier,name:groupName,type:"checkbox",value,defaultChecked:checked,...checkBoxAttr,onChange:onCheckChanged}),react.createElement("label",{className:"govuk-label govuk-checkboxes__label",htmlFor:identifier},text),hint&&react.createElement("div",{id:`${identifier}-item-hint`,className:"govuk-hint govuk-checkboxes__hint"},hint))}const Checkbox=CheckBox;try{CheckBox.displayName="CheckBox",CheckBox.__docgenInfo={description:"",displayName:"CheckBox",props:{identifier:{defaultValue:null,description:"",name:"identifier",required:!0,type:{name:"string"}},groupName:{defaultValue:null,description:"",name:"groupName",required:!0,type:{name:"string"}},text:{defaultValue:null,description:"",name:"text",required:!0,type:{name:"string"}},value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"string"}},hint:{defaultValue:null,description:"",name:"hint",required:!1,type:{name:"string"}},checked:{defaultValue:{value:"false"},description:"",name:"checked",required:!1,type:{name:"boolean"}},onCheckChanged:{defaultValue:null,description:"",name:"onCheckChanged",required:!0,type:{name:"ChangeEventHandler<HTMLInputElement>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/UI/Checkboxes/Checkbox.tsx#CheckBox"]={docgenInfo:CheckBox.__docgenInfo,name:"CheckBox",path:"src/UI/Checkboxes/Checkbox.tsx#CheckBox"})}catch(__react_docgen_typescript_loader_error){}function CheckBoxDivider({text="or"}){return react.createElement("div",{className:"govuk-checkboxes__divider"},text)}try{CheckBoxDivider.displayName="CheckBoxDivider",CheckBoxDivider.__docgenInfo={description:"",displayName:"CheckBoxDivider",props:{text:{defaultValue:{value:"or"},description:"",name:"text",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/UI/Checkboxes/CheckboxDivider.tsx#CheckBoxDivider"]={docgenInfo:CheckBoxDivider.__docgenInfo,name:"CheckBoxDivider",path:"src/UI/Checkboxes/CheckboxDivider.tsx#CheckBoxDivider"})}catch(__react_docgen_typescript_loader_error){}const clone=source=>null!=source?JSON.parse(JSON.stringify(source)):source,setAllCheckBoxValues=(data,checked)=>{const iteratorCheckBoxes=clone(data);return iteratorCheckBoxes.forEach((checkBox=>{checkBox.checked=checked})),iteratorCheckBoxes},CheckBoxList=(0,react.memo)((({identifier,header,hint,data,error,compact,multiQuestion,showToggle,onValueChange})=>{const[checkBoxList,setCheckBoxList]=(0,react.useState)(data),[renderToggle,setRenderToggle]=(0,react.useState)(!1),[toggleText,setToggleText]=(0,react.useState)("Select all"),[allSelected,setAllSelected]=(0,react.useState)(!1),containerAttr={className:error?"govuk-form-group govuk-form-group--error":"govuk-form-group"},checkBoxesWrapperAttr={className:compact?"govuk-checkboxes govuk-checkboxes--small":"govuk-checkboxes"},fieldSetAttr={"aria-describedby":""};error&&(fieldSetAttr["aria-describedby"]=`${identifier}-error `),hint&&(fieldSetAttr["aria-describedby"]+=`${identifier}-hint `),fieldSetAttr["aria-describedby"]+=`${identifier}-legend`;const handleOnChange=e=>{let updatedList=clone(checkBoxList);const valuesIndex=checkBoxList.findIndex((x=>x.value===e.target.value));if(valuesIndex>-1){const selectedCheckBox=updatedList[valuesIndex];if(selectedCheckBox.exclusive&&e.target.checked&&(updatedList=setAllCheckBoxValues(updatedList,!1)),!selectedCheckBox.exclusive){updatedList.findIndex((x=>x.exclusive))>0&&(updatedList=updatedList.map((item=>({...item,checked:!item.exclusive&&item.checked}))))}updatedList[valuesIndex].checked=e.target.checked}showToggle&&(updatedList.every((item=>item.checked))&&(setAllSelected(!0),setToggleText("De-Select all")),e.target.checked||(setAllSelected(!1),setToggleText("Select all"))),setCheckBoxList(updatedList),onValueChange(updatedList)};return(0,react.useEffect)((()=>{setRenderToggle(!renderToggle)}),[checkBoxList]),react.createElement("div",containerAttr,react.createElement("fieldset",{className:"govuk-fieldset",...fieldSetAttr},multiQuestion?react.createElement("legend",{className:"govuk-fieldset__legend",id:`${identifier}-legend`},header):react.createElement("legend",{className:"govuk-fieldset__legend govuk-fieldset__legend--l",id:`${identifier}-legend`},react.createElement("h1",{className:"govuk-fieldset__heading"},header)),hint&&react.createElement("div",{id:`${identifier}-hint`,className:"govuk-hint"},hint),error&&react.createElement("p",{id:`${identifier}-error`,className:"govuk-error-message"},react.createElement("span",{className:"govuk-visually-hidden"},"Error:")," ",error),react.createElement("div",{"data-module":"govuk-checkboxes",...checkBoxesWrapperAttr},showToggle&&react.createElement(react.Fragment,null,react.createElement(Checkbox,{identifier:`${identifier}-toggle`,groupName:identifier,text:toggleText,value:"All selected",key:(0,v4.A)(),checked:allSelected,onCheckChanged:()=>{setToggleText(allSelected?"Select all":"De-Select all"),setAllSelected(!allSelected);let iteratorCheckBoxes=clone(checkBoxList);iteratorCheckBoxes=setAllCheckBoxValues(iteratorCheckBoxes,!allSelected),setCheckBoxList(iteratorCheckBoxes),onValueChange(iteratorCheckBoxes)}}),react.createElement(CheckBoxDivider,{text:"or",key:(0,v4.A)()})),checkBoxList.map(((element,index)=>element.divider?react.createElement(CheckBoxDivider,{text:element.text,key:(0,v4.A)()}):react.createElement(Checkbox,{identifier:`${identifier}-${index+1}`,groupName:identifier,text:element.text,value:element.value,hint:element.hint,key:(0,v4.A)(),checked:element.checked,onCheckChanged:handleOnChange}))))))}));try{CheckBoxList.displayName="CheckBoxList",CheckBoxList.__docgenInfo={description:"",displayName:"CheckBoxList",props:{identifier:{defaultValue:null,description:"",name:"identifier",required:!0,type:{name:"string"}},header:{defaultValue:null,description:"",name:"header",required:!0,type:{name:"string"}},hint:{defaultValue:null,description:"",name:"hint",required:!1,type:{name:"string"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"CheckBoxDataProps[]"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"string"}},compact:{defaultValue:null,description:"",name:"compact",required:!1,type:{name:"boolean"}},multiQuestion:{defaultValue:null,description:"",name:"multiQuestion",required:!1,type:{name:"boolean"}},showToggle:{defaultValue:null,description:"",name:"showToggle",required:!1,type:{name:"boolean"}},onValueChange:{defaultValue:null,description:"",name:"onValueChange",required:!0,type:{name:"(values: CheckBoxDataProps[]) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/UI/Checkboxes/CheckboxList.tsx#CheckBoxList"]={docgenInfo:CheckBoxList.__docgenInfo,name:"CheckBoxList",path:"src/UI/Checkboxes/CheckboxList.tsx#CheckBoxList"})}catch(__react_docgen_typescript_loader_error){}var dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs");const CheckBoxes_stories={title:"Components/Checkboxes/Implementation",component:CheckBoxList},DefaultCheckBoxData=[{text:"British",value:"British"},{text:"Irish",value:"Irish"},{text:"Citizen of another country",value:"Other"}],Default={args:{identifier:"checkboxlist",header:"Checkbox list",data:DefaultCheckBoxData,onValueChange:(0,dist.fn)()}},Compact={args:{identifier:"checkboxlist",header:"Checkbox list in compact mode",data:DefaultCheckBoxData,compact:!0,onValueChange:(0,dist.fn)()}},MultiQuestion={args:{identifier:"checkboxlist",header:"Checkbox list in multi question mode",data:DefaultCheckBoxData,multiQuestion:!0,onValueChange:(0,dist.fn)()}},Divider={args:{identifier:"checkboxlist",header:"Checkbox list with divider",data:[{text:"British",value:"British"},{text:"Irish",value:"Irish"},{text:"or",value:"",divider:!0},{text:"Citizen of another country",value:"Other"}],onValueChange:(0,dist.fn)()}},Hint={args:{identifier:"checkboxlist",header:"Checkbox list with hints",hint:"Checkbox list hint",data:[{text:"British",value:"British",hint:"including English, Scottish, Welsh and Northern Irish"},{text:"Irish",value:"Irish"},{text:"Citizen of another country",value:"Other"}],onValueChange:(0,dist.fn)()}},PreChecked={args:{identifier:"checkboxlist",header:"Checkbox list with pre checked options",data:[{text:"British",value:"British"},{text:"Irish",value:"Irish",checked:!0}],onValueChange:(0,dist.fn)()}},ExclusiveCheckBoxes={args:{identifier:"checkboxlist",header:"Checkbox list with exclusive options",hint:"Select all countries that apply",data:[{text:"France",value:"France"},{text:"Portugal",value:"Portugal"},{text:"Spain",value:"Spain"},{text:"or",value:"",divider:!0},{text:"No, I will not be travelling to any of these countries",value:"none",exclusive:!0}],onValueChange:(0,dist.fn)()}},ToggleCheckBoxes={args:{identifier:"checkboxlist",header:"Checkbox list with toggle options",data:DefaultCheckBoxData,onValueChange:(0,dist.fn)(),showToggle:!0}},Error={args:{identifier:"checkboxlist",header:"Checkbox list with error message",error:"You must select a value",data:DefaultCheckBoxData,onValueChange:(0,dist.fn)()}},__namedExportsOrder=["Default","Compact","MultiQuestion","Divider","Hint","PreChecked","ExclusiveCheckBoxes","ToggleCheckBoxes","Error"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    identifier: 'checkboxlist',\n    header: 'Checkbox list',\n    data: DefaultCheckBoxData,\n    onValueChange: fn()\n  }\n}",...Default.parameters?.docs?.source}}},Compact.parameters={...Compact.parameters,docs:{...Compact.parameters?.docs,source:{originalSource:"{\n  args: {\n    identifier: 'checkboxlist',\n    header: 'Checkbox list in compact mode',\n    data: DefaultCheckBoxData,\n    compact: true,\n    onValueChange: fn()\n  }\n}",...Compact.parameters?.docs?.source}}},MultiQuestion.parameters={...MultiQuestion.parameters,docs:{...MultiQuestion.parameters?.docs,source:{originalSource:"{\n  args: {\n    identifier: 'checkboxlist',\n    header: 'Checkbox list in multi question mode',\n    data: DefaultCheckBoxData,\n    multiQuestion: true,\n    onValueChange: fn()\n  }\n}",...MultiQuestion.parameters?.docs?.source}}},Divider.parameters={...Divider.parameters,docs:{...Divider.parameters?.docs,source:{originalSource:"{\n  args: {\n    identifier: 'checkboxlist',\n    header: 'Checkbox list with divider',\n    data: DividerCheckBoxData,\n    onValueChange: fn()\n  }\n}",...Divider.parameters?.docs?.source}}},Hint.parameters={...Hint.parameters,docs:{...Hint.parameters?.docs,source:{originalSource:"{\n  args: {\n    identifier: 'checkboxlist',\n    header: 'Checkbox list with hints',\n    hint: 'Checkbox list hint',\n    data: HintCheckBoxData,\n    onValueChange: fn()\n  }\n}",...Hint.parameters?.docs?.source}}},PreChecked.parameters={...PreChecked.parameters,docs:{...PreChecked.parameters?.docs,source:{originalSource:"{\n  args: {\n    identifier: 'checkboxlist',\n    header: 'Checkbox list with pre checked options',\n    data: PresetCheckBoxData,\n    onValueChange: fn()\n  }\n}",...PreChecked.parameters?.docs?.source}}},ExclusiveCheckBoxes.parameters={...ExclusiveCheckBoxes.parameters,docs:{...ExclusiveCheckBoxes.parameters?.docs,source:{originalSource:"{\n  args: {\n    identifier: 'checkboxlist',\n    header: 'Checkbox list with exclusive options',\n    hint: 'Select all countries that apply',\n    data: ExclusiveCheckBoxData,\n    onValueChange: fn()\n  }\n}",...ExclusiveCheckBoxes.parameters?.docs?.source}}},ToggleCheckBoxes.parameters={...ToggleCheckBoxes.parameters,docs:{...ToggleCheckBoxes.parameters?.docs,source:{originalSource:"{\n  args: {\n    identifier: 'checkboxlist',\n    header: 'Checkbox list with toggle options',\n    data: DefaultCheckBoxData,\n    onValueChange: fn(),\n    showToggle: true\n  }\n}",...ToggleCheckBoxes.parameters?.docs?.source}}},Error.parameters={...Error.parameters,docs:{...Error.parameters?.docs,source:{originalSource:"{\n  args: {\n    identifier: 'checkboxlist',\n    header: 'Checkbox list with error message',\n    error: 'You must select a value',\n    data: DefaultCheckBoxData,\n    onValueChange: fn()\n  }\n}",...Error.parameters?.docs?.source}}}}}]);